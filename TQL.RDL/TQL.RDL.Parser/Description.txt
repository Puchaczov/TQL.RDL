
Short specification:

basic:
	repeat every ([second/minute/hour/day/month/year] | nth [seconds/minutes/hours/days/months/years])
optional:
	where left [operators:+,-,*,/,%,in,not in] right
optional:
	start at 'date constant'
	stop at 'date constant'

left, right: [second/minute/hour/day/month/year/function()/constant]

Note: left and right can contains subexpressions in any level.

Basic functions:
	IsLastDayOfMonth(): bool
	IsLastDayOfMonth(DateTimeOffset time): bool
	IsDayOfWeek(DateTimeOffset time, long DayOfWeek): bool
	IsDayOfWeek(long DayOfWeek): bool
	IsWorkingDay(): bool
	IsEven(long number): bool
	IsOdd(long number): bool

	GetDate(): DateTimeOffset
	Now(): DateTimeOffset
	UtcNow(): DateTimeOffset

	GetDay(): long
	GetMonth(): long
	GetYear(): long

	GetSecond(): long
	GetMinute(): long
	GetHour(): long

	GetDayOfYear(): long

How query can looks:

repeat every day where (IsLastDayOfMonth() and GetDay() in (monday,friday)) or (IsLastDayOfMonth() and GetMonth() % 2 = 0)

C# methods bindings:

	You can bind static methods by registering it in GlobalMetadata manager. Allowed return type of methods is DateTimeOffset, 
	allowed parameters of functions are DateTimeOffset? and long?. Parameters count aren't limited.

RDL virtual machine (Expression evaluator engine):

	+ Stack based (operate on two stacks: long? and DateTimeOffset?)
	+ Specialized small assembler with instructions: 
		GoTo, Break, Jump, CallExternal, CallExternal, Call, Ret, Push, Load, And, Or, GreaterOrEqual, 
		LessOrEqual, Greater, Less, Equal, NotEqual, In, NotIn, Modify, PrepareFunctionCall
	+ Less amount of instructions is better, specialized instructions with complex internals 
	  are prefered over generate more set of instructions doing the same.
	+ Query hints support

Flow:

	String expression convertion to evaluator object uses such stages:
	"repeat where..." -> preprocessor -> lexer -> parser -> code generator -> RDL virtual machine.

	Then, you can evaluate your next occurences.

Notice:

	Not every features pointed in this document are already supported!


